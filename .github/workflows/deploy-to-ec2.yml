name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tesla-buddy-microservice
        IMAGE_TAG: ${{ github.sha }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}
        
        # Build and push Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg NPM_TOKEN=$NPM_TOKEN .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          echo "Connection successful!"
          whoami
          
          # Check if AWS CLI is installed
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found, installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            echo "AWS CLI installed"
          fi
          
          echo "AWS CLI version: $(aws --version)"
          
          # Check if Docker is installed, install if not
          if ! command -v docker &> /dev/null; then
            echo "Docker not found, installing..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker $(whoami)
            echo "Docker installed, you might need to reconnect for group changes to take effect"
            # Try to use docker without reconnecting
            sudo docker --version
            # Use sudo for docker commands below since group membership isn't active yet
            echo "Using sudo for docker commands in this session"
            USE_SUDO=sudo
          else
            echo "Docker is already installed"
            USE_SUDO=""
          fi
          
          echo "Docker version: $(${USE_SUDO} docker --version || echo 'Cannot get Docker version')"
          
          # Try ECR login with error handling
          echo "Attempting ECR login..."
          aws ecr get-login-password --region us-east-2 | ${USE_SUDO} docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }} || { echo "ECR login failed"; exit 1; }
          
          echo "ECR login successful"
          
          # Pull the latest image with error handling
          echo "Pulling latest image..."
          ${USE_SUDO} docker pull ${{ steps.login-ecr.outputs.registry }}/tesla-buddy-microservice:latest || { echo "Failed to pull image"; exit 1; }
          
          echo "Image pulled successfully"
          
          # Stop existing container if running
          echo "Cleaning up existing containers..."
          ${USE_SUDO} docker stop tesla-buddy-container || echo "No container to stop"
          ${USE_SUDO} docker rm tesla-buddy-container || echo "No container to remove"
          
          echo "Starting new container..."
          # Run new container
          ${USE_SUDO} docker run -d \
            --name tesla-buddy-container \
            -p 80:3000 \
            --restart unless-stopped \
            ${{ steps.login-ecr.outputs.registry }}/tesla-buddy-microservice:latest
          
          echo "Container started successfully"
          
          # Verify container is running
          ${USE_SUDO} docker ps | grep tesla-buddy-container