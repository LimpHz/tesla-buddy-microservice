name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Set lowercase repository owner
      id: lowercase
      run: |
        echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        build-args: |
          NPM_TOKEN=${{ secrets.NPM_TOKEN }}
        tags: |
          ghcr.io/${{ steps.lowercase.outputs.REPO_OWNER }}/tesla-buddy-microservice:latest
          ghcr.io/${{ steps.lowercase.outputs.REPO_OWNER }}/tesla-buddy-microservice:${{ github.sha }}
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          # Set lowercase repository owner
          REPO_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          echo "Cleaning up disk space..."
          docker system prune -af --volumes
          
          echo "Logging in to GitHub Container Registry..."
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          echo "Pulling latest image..."
          docker pull ghcr.io/${REPO_OWNER}/tesla-buddy-microservice:${{ github.sha }}
          
          echo "Stopping existing container..."
          docker stop tesla-buddy-container || echo "No container to stop"
          docker rm tesla-buddy-container || echo "No container to remove"
          
          echo "Starting new container..."
          docker run -d \
            --name tesla-buddy-container \
            -p 127.0.0.1:3000:3000 \
            --restart unless-stopped \
            -e RATE_LIMIT_MAX=1000 \
            -e RATE_LIMIT_WINDOW_MS=3600000 \
            -e DISABLE_RATE_LIMIT=true \
            ghcr.io/${REPO_OWNER}/tesla-buddy-microservice:${{ github.sha }}
          
          echo "Container started successfully"
          
          # Only run these commands if NGINX/SSL is not already set up
          if [ ! -f /etc/nginx/ssl/nginx.crt ]; then
            echo "Setting up HTTPS with NGINX..."
            
            # Install NGINX if needed
            command -v nginx >/dev/null 2>&1 || sudo yum install -y nginx openssl
            
            # Generate self-signed certificate
            sudo mkdir -p /etc/nginx/ssl
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/nginx/ssl/nginx.key \
              -out /etc/nginx/ssl/nginx.crt \
              -subj "/CN=ec2-3-139-82-188.us-east-2.compute.amazonaws.com"
              
            # Fix SSL certificate permissions
            sudo chmod 600 /etc/nginx/ssl/nginx.key
            sudo chmod 644 /etc/nginx/ssl/nginx.crt
            sudo chown nginx:nginx /etc/nginx/ssl/nginx.key /etc/nginx/ssl/nginx.crt
            
            # Update NGINX configuration
            sudo bash -c 'grep -q "server_names_hash_bucket_size" /etc/nginx/nginx.conf || sed -i "/http {/a \    server_names_hash_bucket_size 128;" /etc/nginx/nginx.conf'
            
            # Create NGINX configuration files
            sudo bash -c 'cat > /etc/nginx/conf.d/tesla-buddy.conf << EOF
            # HTTP redirect to HTTPS
            server {
                listen 80;
                server_name ec2-3-139-82-188.us-east-2.compute.amazonaws.com;
                return 301 https://\$host\$request_uri;
            }

            # HTTPS server
            server {
                listen 443 ssl;
                server_name ec2-3-139-82-188.us-east-2.compute.amazonaws.com;
                
                ssl_certificate /etc/nginx/ssl/nginx.crt;
                ssl_certificate_key /etc/nginx/ssl/nginx.key;
                ssl_protocols TLSv1.2 TLSv1.3;
                
                location = /health {
                    return 200 "Service is healthy!";
                    add_header Content-Type text/plain;
                }
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF'
            
            # Remove default config and restart NGINX
            sudo rm -f /etc/nginx/conf.d/default.conf
            sudo nginx -t && sudo systemctl restart nginx
          else
            echo "HTTPS already configured, skipping setup"
          fi
          
          # Ensure firewall allows HTTP/HTTPS
          if command -v firewall-cmd &> /dev/null; then
            sudo firewall-cmd --permanent --add-service=http
            sudo firewall-cmd --permanent --add-service=https
            sudo firewall-cmd --reload
          fi
          
          echo "Deployment completed successfully"
