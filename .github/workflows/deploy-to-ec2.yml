name: Deploy to EC2

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: tesla-buddy-microservice
        IMAGE_TAG: ${{ github.sha }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        # Create ECR repository if it doesn't exist
        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} || aws ecr create-repository --repository-name ${ECR_REPOSITORY}
        
        # Build and push Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg NPM_TOKEN=$NPM_TOKEN .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
          echo "Cleaning up disk space..."
          docker system prune -af --volumes
          
          echo "Logging in to ECR..."
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          echo "Pulling latest image..."
          docker pull ${{ steps.login-ecr.outputs.registry }}/tesla-buddy-microservice:latest
          
          echo "Stopping existing container..."
          docker stop tesla-buddy-container || echo "No container to stop"
          docker rm tesla-buddy-container || echo "No container to remove"
          
          echo "Starting new container..."
          docker run -d \
            --name tesla-buddy-container \
            -p 127.0.0.1:3000:3000 \
            --restart unless-stopped \
            -e RATE_LIMIT_MAX=500 \
            -e RATE_LIMIT_WINDOW_MS=900000 \
            ${{ steps.login-ecr.outputs.registry }}/tesla-buddy-microservice:latest
          
          echo "Container started successfully"
          
          # Only run these commands if NGINX/SSL is not already set up
          if [ ! -f /etc/nginx/ssl/nginx.crt ]; then
            echo "Setting up HTTPS with NGINX..."
            
            # Install NGINX if needed
            command -v nginx >/dev/null 2>&1 || sudo yum install -y nginx openssl
            
            # Generate self-signed certificate
            sudo mkdir -p /etc/nginx/ssl
            sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
              -keyout /etc/nginx/ssl/nginx.key \
              -out /etc/nginx/ssl/nginx.crt \
              -subj "/CN=ec2-3-139-82-188.us-east-2.compute.amazonaws.com"
              
            # Fix SSL certificate permissions
            sudo chmod 600 /etc/nginx/ssl/nginx.key
            sudo chmod 644 /etc/nginx/ssl/nginx.crt
            sudo chown nginx:nginx /etc/nginx/ssl/nginx.key /etc/nginx/ssl/nginx.crt
            
            # Update NGINX configuration
            sudo bash -c 'grep -q "server_names_hash_bucket_size" /etc/nginx/nginx.conf || sed -i "/http {/a \    server_names_hash_bucket_size 128;" /etc/nginx/nginx.conf'
            
            # Create NGINX configuration files
            sudo bash -c 'cat > /etc/nginx/conf.d/tesla-buddy.conf << EOF
            # HTTP redirect to HTTPS
            server {
                listen 80;
                server_name ec2-3-139-82-188.us-east-2.compute.amazonaws.com;
                return 301 https://\$host\$request_uri;
            }

            # HTTPS server
            server {
                listen 443 ssl;
                server_name ec2-3-139-82-188.us-east-2.compute.amazonaws.com;
                
                ssl_certificate /etc/nginx/ssl/nginx.crt;
                ssl_certificate_key /etc/nginx/ssl/nginx.key;
                ssl_protocols TLSv1.2 TLSv1.3;
                
                location = /health {
                    return 200 "Service is healthy!";
                    add_header Content-Type text/plain;
                }
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF'
            
            # Remove default config and restart NGINX
            sudo rm -f /etc/nginx/conf.d/default.conf
            sudo nginx -t && sudo systemctl restart nginx
          else
            echo "HTTPS already configured, skipping setup"
          fi
          
          # Ensure firewall allows HTTP/HTTPS
          if command -v firewall-cmd &> /dev/null; then
            sudo firewall-cmd --permanent --add-service=http
            sudo firewall-cmd --permanent --add-service=https
            sudo firewall-cmd --reload
          fi
          
          echo "Deployment completed successfully"
